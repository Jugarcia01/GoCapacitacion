package main

import (
	"log"
	"net/http"
	"strconv"

	"github.com/gorilla/mux" // Mux permite definir que métodos HTTP se van a manejar.

	"./database"
	"./respuestas"

	//"github.com/jugarcia01/GoCapacitacion/serversGo/orm/database"
	"./models"
	//"github.com/jugarcia01/GoCapacitacion/serversGo/orm/models"
	// "github.com/jugarcia01/GoCapacitacion/serversGo/orm/database"
	// "gorm.io/driver/sqlite"
	// "gorm.io/gorm"
	// Documentacion de gorm: https://gorm.io/docs/
	//"gorm.io/driver/postgres"
)

// type Persona struct {
// 	gorm.Model
// 	Nombre string
// 	Email  string
// }

const PORT = ":5000"

// var db *gorm.DB
var err error

func main() {
	database.Migrar()

	router := mux.NewRouter()
	log.Println("Server escuchando en el puerto", PORT)
	router.HandleFunc("/cursos", listarCursos).Methods("GET")
	router.HandleFunc("/curso/{curso}", verCurso).Methods("GET")
	router.HandleFunc("/curso", crearCurso).Methods("POST") // En postman aplicar metodo POST para crear registro de cursos para la BD
	router.HandleFunc("/curso/{curso}", actualizarCurso).Methods("PUT")
	router.HandleFunc("/curso/{curso}", eliminarCurso).Methods("DELETE")
	http.Handle("/", router)
	log.Fatal(http.ListenAndServe(PORT, nil))

}

func listarCursos(w http.ResponseWriter, r *http.Request) {
	// conectar()
	// migrar()
	w.Header().Add("Content-Type", "application/json")
	cursos := database.GetCursos()
	respuestas.ResponderJSON(cursos, w)
	// json.NewEncoder(w).Encode(cursos)
	// log.Println(w, "Ruta: /cursos")
	//fmt.Fprint(w, "Ruta: /cursos")
	// En browser: http://localhost:5000/cursos

}

func verCurso(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	// log.Println(vars["curso"])
	idCurso, _ := strconv.Atoi(vars["curso"])
	// if err != nil {
	// 	respuesta := models.Respuesta{Mensaje: "ID no válido", Codigo: -1}
	// 	w.Header().Add("Content-Type", "application/json")
	// 	json.NewEncoder(w).Encode(respuesta)
	// }
	if responderSiHayError(err, "ID no válido", -1, w) {
		return
	}
	curso := database.VerCurso(uint(idCurso))
	// w.Header().Add("Content-Type", "application/json")
	// json.NewEncoder(w).Encode(curso)
	respuestas.ResponderJSON(curso, w)
	//log.Print(w, "Ruta: con /curso/#")
	// En browser: http://localhost:5000/curso/1

}

func crearCurso(w http.ResponseWriter, r *http.Request) {
	//database.CrearCurso("Curso de Go", "Introduccion a Golang")
	//log.Print(w, "Registro creado correctamente!")

	// var curso models.Curso
	var body models.Curso
	// json.NewDecoder(r.Body).Decode(&curso)
	// if err != nil {
	// 	log.Println("Error convirtiendo el body!")
	// 	panic(err)
	// }
	validarError(err, "Error convirtiendo el body!")
	// nuevoCurso := database.CrearCurso(curso.Nombre, curso.Descripcion)
	curso := database.CrearCurso(body.Nombre, body.Descripcion)
	// w.Header().Add("Content-Type", "application/json")
	// json.NewEncoder(w).Encode(nuevoCurso)
	respuestas.ResponderJSON(curso, w)
}

func actualizarCurso(w http.ResponseWriter, r *http.Request) {
	// Obtenemos el id del curso
	vars := mux.Vars(r)
	idCurso, _ := strconv.Atoi(vars["curso"])

	if responderSiHayError(err, "ID no válido para actualizar!", -1, w) {
		return
	}
	var body models.Curso
	// err := json.NewDecoder(r.Body).Decode(&body)
	// if err != nil {
	// 	log.Println("Error convirtiendo el body!")
	// 	panic(err)
	// }
	validarError(err, "Error convirtiendo el body!")
	curso := database.ActualizarCurso(uint(idCurso), body.Nombre, body.Descripcion)
	respuestas.ResponderJSON(curso, w)
	// log.Println(curso)
}

func eliminarCurso(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	idCurso, err := strconv.Atoi(vars["curso"])
	if responderSiHayError(err, "ID no válido", -1, w) {
		return
	}
	database.EliminarCurso(uint(idCurso))
	respuestas.ResponderJSON(models.Respuesta{Mensaje: "Registro Eliminado Correctamente!", Codigo: 1}, w)
}

func validarError(err error, mensaje string) {
	if err != nil {
		log.Println(mensaje)
		panic(err)
	}
}

func responderSiHayError(err error, mensaje string, codigo int, w http.ResponseWriter) bool {
	if err != nil {
		respuestas.ResponderJSON(
			models.Respuesta{Mensaje: mensaje, Codigo: codigo}, w)
		return true
	}
	return false
}

// LO QUE SIGUE FUE MIGRADO AL ARCHIVO db.go
// // Nos conectamos a la BD antes de crear tablas.
// func conectar() {

// 	// Si la conexion a la db ya existe entonces no es necesario que se vuelva
// 	// a conectar. se aplica return si db es dif. de nil es decir cuando no hay conexion
// 	// ejecuta la conexion
// 	if db != nil {
// 		return
// 	}
// 	// Se indica a gorm que abra la conexion y donde lo va a guardar la config de la conexion
// 	db, err := gorm.Open(sqlite.Open("cursos.db"), &gorm.Config{})

// 	// Con postgres la cadena de conexion sería similar a:
// 	//conexion := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable", host, port, user, password, dbname)
// 	//db, err = sql.Open(postgres.Open(conexion), &gorm.Config{})

// 	if err != nil {
// 		log.Println("Error en la conexion...")
// 		panic(err)
// 	}
// }

// // Se procede a crear la tabla mediante el programa, el ORM permite efectuar ese proceso
// // Una vez se establece la conexion se pueden migrar los datos en la db.
// func migrar() {
// 	db.AutoMigrate(&models.Curso{})
// }

// func GetCursos() (listarCursos []models.Curso) {
// 	_ = GetConn()
// 	db.Find(&listarCursos)
// 	return
// }

// func CrearCurso(nombre, descripcion string) {
// 	_ = GetConn()
// 	curso := models.Curso{Nombre: nombre, Descripcion: descripcion}
// 	db.Create(&curso)
// }
